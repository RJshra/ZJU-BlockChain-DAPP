/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace StudentSocietyDAO {
  export type ListStruct = {
    propaser: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    startTime: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    isEnd: PromiseOrValue<boolean>;
    pass: PromiseOrValue<boolean>;
    approve: PromiseOrValue<BigNumberish>;
    reject: PromiseOrValue<BigNumberish>;
  };

  export type ListStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    number,
    number
  ] & {
    propaser: string;
    name: string;
    startTime: BigNumber;
    duration: BigNumber;
    isEnd: boolean;
    pass: boolean;
    approve: number;
    reject: number;
  };
}

export interface StudentSocietyDAOInterface extends utils.Interface {
  functions: {
    "INITIATE_AMOUNT()": FunctionFragment;
    "VOTE_AMOUNT()": FunctionFragment;
    "bonus()": FunctionFragment;
    "end(uint32)": FunctionFragment;
    "getBonusCount()": FunctionFragment;
    "help_gain_points()": FunctionFragment;
    "initiate(string,uint256,uint256)": FunctionFragment;
    "proposal_account()": FunctionFragment;
    "proposal_num()": FunctionFragment;
    "recieveBonus(string)": FunctionFragment;
    "return_all_proposals()": FunctionFragment;
    "return_person_index()": FunctionFragment;
    "return_person_proposals()": FunctionFragment;
    "return_single_proposal(uint32)": FunctionFragment;
    "updateAll()": FunctionFragment;
    "updateOnePerson()": FunctionFragment;
    "vote(uint32,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "INITIATE_AMOUNT"
      | "VOTE_AMOUNT"
      | "bonus"
      | "end"
      | "getBonusCount"
      | "help_gain_points"
      | "initiate"
      | "proposal_account"
      | "proposal_num"
      | "recieveBonus"
      | "return_all_proposals"
      | "return_person_index"
      | "return_person_proposals"
      | "return_single_proposal"
      | "updateAll"
      | "updateOnePerson"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "INITIATE_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bonus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "end",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBonusCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "help_gain_points",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposal_account",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposal_num",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recieveBonus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "return_all_proposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "return_person_index",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "return_person_proposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "return_single_proposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "updateAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOnePerson",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "INITIATE_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bonus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBonusCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "help_gain_points",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initiate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposal_account",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposal_num",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recieveBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "return_all_proposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "return_person_index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "return_person_proposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "return_single_proposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOnePerson",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {};
}

export interface StudentSocietyDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StudentSocietyDAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INITIATE_AMOUNT(overrides?: CallOverrides): Promise<[number]>;

    VOTE_AMOUNT(overrides?: CallOverrides): Promise<[number]>;

    bonus(overrides?: CallOverrides): Promise<[string]>;

    end(
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBonusCount(overrides?: CallOverrides): Promise<[number]>;

    help_gain_points(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiate(
      proposal_name: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      duration_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposal_account(overrides?: CallOverrides): Promise<[string]>;

    proposal_num(overrides?: CallOverrides): Promise<[number]>;

    recieveBonus(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    return_all_proposals(
      overrides?: CallOverrides
    ): Promise<[StudentSocietyDAO.ListStructOutput[]]>;

    return_person_index(overrides?: CallOverrides): Promise<[number[]]>;

    return_person_proposals(
      overrides?: CallOverrides
    ): Promise<[StudentSocietyDAO.ListStructOutput[]]>;

    return_single_proposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[StudentSocietyDAO.ListStructOutput]>;

    updateAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOnePerson(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vote(
      index: PromiseOrValue<BigNumberish>,
      approval: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  INITIATE_AMOUNT(overrides?: CallOverrides): Promise<number>;

  VOTE_AMOUNT(overrides?: CallOverrides): Promise<number>;

  bonus(overrides?: CallOverrides): Promise<string>;

  end(
    index: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBonusCount(overrides?: CallOverrides): Promise<number>;

  help_gain_points(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiate(
    proposal_name: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    duration_time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposal_account(overrides?: CallOverrides): Promise<string>;

  proposal_num(overrides?: CallOverrides): Promise<number>;

  recieveBonus(
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  return_all_proposals(
    overrides?: CallOverrides
  ): Promise<StudentSocietyDAO.ListStructOutput[]>;

  return_person_index(overrides?: CallOverrides): Promise<number[]>;

  return_person_proposals(
    overrides?: CallOverrides
  ): Promise<StudentSocietyDAO.ListStructOutput[]>;

  return_single_proposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<StudentSocietyDAO.ListStructOutput>;

  updateAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOnePerson(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vote(
    index: PromiseOrValue<BigNumberish>,
    approval: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    INITIATE_AMOUNT(overrides?: CallOverrides): Promise<number>;

    VOTE_AMOUNT(overrides?: CallOverrides): Promise<number>;

    bonus(overrides?: CallOverrides): Promise<string>;

    end(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBonusCount(overrides?: CallOverrides): Promise<number>;

    help_gain_points(overrides?: CallOverrides): Promise<void>;

    initiate(
      proposal_name: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      duration_time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposal_account(overrides?: CallOverrides): Promise<string>;

    proposal_num(overrides?: CallOverrides): Promise<number>;

    recieveBonus(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    return_all_proposals(
      overrides?: CallOverrides
    ): Promise<StudentSocietyDAO.ListStructOutput[]>;

    return_person_index(overrides?: CallOverrides): Promise<number[]>;

    return_person_proposals(
      overrides?: CallOverrides
    ): Promise<StudentSocietyDAO.ListStructOutput[]>;

    return_single_proposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<StudentSocietyDAO.ListStructOutput>;

    updateAll(overrides?: CallOverrides): Promise<void>;

    updateOnePerson(overrides?: CallOverrides): Promise<void>;

    vote(
      index: PromiseOrValue<BigNumberish>,
      approval: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    INITIATE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    bonus(overrides?: CallOverrides): Promise<BigNumber>;

    end(
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBonusCount(overrides?: CallOverrides): Promise<BigNumber>;

    help_gain_points(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiate(
      proposal_name: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      duration_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposal_account(overrides?: CallOverrides): Promise<BigNumber>;

    proposal_num(overrides?: CallOverrides): Promise<BigNumber>;

    recieveBonus(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    return_all_proposals(overrides?: CallOverrides): Promise<BigNumber>;

    return_person_index(overrides?: CallOverrides): Promise<BigNumber>;

    return_person_proposals(overrides?: CallOverrides): Promise<BigNumber>;

    return_single_proposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOnePerson(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vote(
      index: PromiseOrValue<BigNumberish>,
      approval: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INITIATE_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOTE_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    end(
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBonusCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    help_gain_points(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiate(
      proposal_name: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      duration_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposal_account(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposal_num(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recieveBonus(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    return_all_proposals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    return_person_index(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    return_person_proposals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    return_single_proposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOnePerson(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      index: PromiseOrValue<BigNumberish>,
      approval: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
